#!/usr/bin/env node

/**
 * Module dependencies.
 */
var open = require("open");
var app = require('../app');
var debug = require('debug')('mybot:server');
var http = require('http');
var fp = require("find-free-port");
var freePort = '';
/**
 * Get port from environment and store in Express.
 */
fp(3000, 3100, '127.0.0.1', 3, function(err, p1, p2, p3) {
    console.log('Puerto 1: ' + p1);
    console.log('Puerto 2:' + p2);
    console.log('Puerto 3:' + p3);
    if (p1) {
        freePort = p1;
    } else if (p2) {
        freePort = p2;
    } else if (p3) {
        freePort = p2;
    } else {
        console.error(err);
    }
    var port = normalizePort(freePort || process.env.PORT);
    app.set('port', freePort);

    /**
     * Create HTTP server.
     */
    var server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port, '127.0.0.1', function() {
        console.log('Localhost up!');
        open('http://localhost:' + freePort);
    });
    server.on('error', onError);
    server.on('listening', onListening);

    /**
     * Normalize a port into a number, string, or false.
     */

    function normalizePort(val) {
        var port = parseInt(val, 10);

        if (isNaN(port)) {
            // named pipe
            return val;
        }

        if (port >= 0) {
            // port number
            return port;
        }

        return false;
    }

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        var bind = typeof port === 'string' ?
            'Pipe ' + port :
            'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
        var addr = server.address();
        var bind = typeof addr === 'string' ?
            'pipe ' + addr :
            'port ' + addr.port;
        debug('Listening on ' + bind);
    }
});